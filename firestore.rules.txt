rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - only Executive Officers can update/delete, users can create/read their own
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];
      allow list: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];

      match /public_profile/{profileId} {
        allow read: if request.auth != null;
        allow create, update: if request.auth != null && 
          request.auth.uid == userId &&
          profileId == 'profile';
        allow create, update, delete: if request.auth != null &&
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
            'General Officer', 'Executive Officer', 'Administrator'
          ];
      }

      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Executive Officer', 'Administrator'];
      allow delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator' &&
        resource.data.role in ['Executive Officer', 'Administrator'];

      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        request.resource.data.keys().hasAny(['lastEventAttended', 'points', 'eventsAttended', 'name', 'major', 'graduationYear']);
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        request.resource.data.keys().hasAny(['hasIEEEEmail', 'ieeeEmailCreatedAt']) &&
        (!request.resource.data.keys().hasAny(['ieeeEmail']) ||
         !exists(/databases/$(database)/documents/users/$(userId)) ||
         !get(/databases/$(database)/documents/users/$(userId)).data.keys().hasAny(['ieeeEmail']));
      allow update: if request.auth != null &&
        request.auth.uid == userId &&
        request.resource.data.keys().hasOnly(['ieeeEmailStatus']) &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Past Officer', 'Administrator'
        ];
      allow update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator' &&
        request.resource.data.keys().hasAny(['hasIEEEEmail', 'ieeeEmail', 'ieeeEmailCreatedAt', 'ieeeEmailStatus']);
    }

    // Invites collection
    match /invites/{inviteId} {
      allow create, read, update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];
      allow read: if request.auth != null &&
        request.auth.token.email == resource.data.email;
      allow update: if request.auth != null &&
        request.auth.token.email == resource.data.email &&
        request.resource.data.status in ['accepted', 'declined'];
    }

    // Events collection
    match /events/{eventId} {
      allow read: if request.auth != null && resource.data.published == true;
      allow list: if request.auth != null && resource.data.published == true;
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];
      allow read, list: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'Executive Officer', 'Administrator'
        ];
      allow create: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];
      allow update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'General Officer' &&
        resource.data.requestedUser == request.auth.uid &&
        resource.data.status in ['submitted', 'pending'];
      allow update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'Executive Officer', 'Administrator'
        ];
      allow update: if request.auth != null &&
        resource.data.published == true &&
        request.resource.data.keys().hasOnly(['attendees']) &&
        request.auth.uid in request.resource.data.attendees &&
        !(request.auth.uid in resource.data.get('attendees', []));
      match /attendees/{attendeeId} {
        allow create: if request.auth != null &&
          request.auth.uid == attendeeId &&
          request.auth.uid == request.resource.data.userId;
        allow read: if request.auth != null && request.auth.uid == attendeeId;
        allow read, update, delete: if request.auth != null &&
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
            'General Officer', 'Executive Officer', 'Administrator'
          ];
      }
    }

    // Event requests collection
    match /event_requests/{requestId} {
      // Allow officers to read and edit any event request
      allow read, update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];

      // Allow audit log updates for any authenticated user with proper role
      allow update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'Member', 'General Officer', 'Executive Officer', 'Administrator'
        ] &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['auditLogs', 'updatedAt']);

      // Allow original submitter to read and delete their own requests
      allow read, delete: if request.auth != null &&
        request.auth.uid == resource.data.requestedUser;

      // Allow original submitter to update their own requests when status is submitted
      allow update: if request.auth != null &&
        request.auth.uid == resource.data.requestedUser &&
        resource.data.status == 'submitted';

      // Allow original submitter to update their own requests (broader rule)
      allow update: if request.auth != null &&
        request.auth.uid == resource.data.requestedUser;
      // Allow officers to update graphics-related fields
      allow update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ] &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['graphicsCompleted', 'graphicsFiles', 'updatedAt']);

      // Allow Executive Officers and Administrators to change status
      allow update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'Executive Officer', 'Administrator'
        ] &&
        request.resource.data.status in ['approved', 'declined', 'published'];

      // Allow Executive Officers and Administrators to change submitter and audit logs
      allow update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'Executive Officer', 'Administrator'
        ] &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['requestedUser', 'updatedAt', 'auditLogs']);

      // Allow Executive Officers and Administrators full access (this rule should be last as fallback)
      allow read, update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'Executive Officer', 'Administrator'
        ];
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.requestedUser;
    }

    // Reimbursements collection
    match /reimbursements/{reimbursementId} {
      allow read, delete: if request.auth != null &&
        request.auth.uid == resource.data.submittedBy;
      allow update: if request.auth != null &&
        request.auth.uid == resource.data.submittedBy &&
        resource.data.status == 'submitted';
      allow read, update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'Executive Officer', 'Administrator'
        ];
      allow create: if request.auth != null &&
        request.auth.uid == request.resource.data.submittedBy &&
        request.resource.data.keys().hasAll(['title', 'totalAmount', 'status', 'submittedBy', 'department', 'businessPurpose', 'expenses', 'submittedAt']) &&
        request.resource.data.submittedBy == request.auth.uid &&
        request.resource.data.status == 'submitted';
    }

    // Logs collection
    match /logs/{logId} {
      allow read, write, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];
    }

    // Templates collection
    match /templates/{templateId} {
      allow read, write, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];
    }

    // Public profiles collection
    match /public_profiles/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      allow create, update, delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];
    }

    // Fund Deposits collection
    match /fundDeposits/{depositId} {
      allow create: if request.auth != null && 
        request.resource.data.depositedBy == request.auth.uid;
      allow read: if request.auth != null && resource.data.depositedBy == request.auth.uid;
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer'
        ] &&
        resource.data.depositedBy == request.auth.uid;
      allow read, update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
      allow delete: if request.auth != null && 
        resource.data.depositedBy == request.auth.uid &&
        resource.data.status == 'pending';
      allow delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
    }

    // Constitution Builder
    match /constitutions/{constitutionId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
          'Executive Officer', 'Administrator'
        ];
      allow delete: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Administrator';
      match /sections/{sectionId} {
        allow read: if request.auth != null;
        allow create, update, delete: if request.auth != null &&
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
            'Executive Officer', 'Administrator'
          ];
      }
      match /auditLog/{auditEntryId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null &&
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in [
            'Executive Officer', 'Administrator'
          ] &&
          request.resource.data.userId == request.auth.uid;
        allow update, delete: if false;
      }
    }

    // Default deny
    match /{document=**} {
      allow read, write, delete: if false;
    }
  }
}