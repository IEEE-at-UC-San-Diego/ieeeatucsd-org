rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isOfficer() {
      return request.auth != null &&
        exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
        get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in [
          'General Officer', 'Executive Officer', 'Administrator'
        ];
    }

    function canSubmitEvents() {
      return request.auth != null &&
        exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
        get(/databases/(default)/documents/users/$(request.auth.uid)).data.role in [
         'General Officer', 'Executive Officer', 'Administrator'
        ];
    }

    // Helper: check if user owns the event request (eventId can be event_request ID or actual event ID)
    function isEventRequestOwner(eventId) {
      return request.auth != null && (
        // Check if eventId is an event_request ID
        (exists(/databases/(default)/documents/event_requests/$(eventId)) &&
         get(/databases/(default)/documents/event_requests/$(eventId)).data.requestedUser == request.auth.uid) ||
        // Check if eventId is an actual event ID with createdFrom field
        (exists(/databases/(default)/documents/events/$(eventId)) &&
         get(/databases/(default)/documents/events/$(eventId)).data.createdFrom != null &&
         exists(/databases/(default)/documents/event_requests/$(get(/databases/(default)/documents/events/$(eventId)).data.createdFrom)) &&
         get(/databases/(default)/documents/event_requests/$(get(/databases/(default)/documents/events/$(eventId)).data.createdFrom)).data.requestedUser == request.auth.uid)
      );
    }

    // Helper: check if event is published (public access)
    function isEventPublic(eventId) {
      return exists(/databases/(default)/documents/events/$(eventId)) &&
        get(/databases/(default)/documents/events/$(eventId)).data.published == true;
    }

    // Helper: check if user can access event files (broader permissions)
    function canAccessEventFiles(eventId) {
      return request.auth != null && (
        isOfficer() ||
        canSubmitEvents() ||
        isEventRequestOwner(eventId) ||
        isEventPublic(eventId)
      );
    }

    // Legacy user-based paths (kept during migration period)
    match /resumes/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /invoices/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == userId || isOfficer() || canSubmitEvents());
    }

    match /room_bookings/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == userId || isOfficer() || canSubmitEvents());
    }

    match /logos/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == userId || isOfficer() || canSubmitEvents());
    }

    match /reimbursements/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == userId || isOfficer() || canSubmitEvents());
    }

    match /fund_deposits/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null &&
        (request.auth.uid == userId || isOfficer() || canSubmitEvents());
    }

    match /graphics/{userId}/{allPaths=**} {
      allow write: if request.auth != null && isOfficer();
      allow read: if request.auth != null && isOfficer();
    }

    // New event-based file organization - SIMPLIFIED WORKING RULES
    match /events/{eventId}/{category}/{allPaths=**} {
      // TEMPORARY: Allow all authenticated users full access (including delete)
      // This ensures file management works while we debug the specific permission issues
      allow read, write, delete: if request.auth != null;
    }

    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}